<!DOCTYPE html>
<html>
<head>
    <!--
        Customize this policy to fit your own app's needs. For more guidance, see:
            https://github.com/apache/cordova-plugin-whitelist/blob/master/README.md#content-security-policy
        Some notes:
            * gap: is required only on iOS (when using UIWebView) and is needed for JS->native communication
            * https://ssl.gstatic.com is required only on Android and is needed for TalkBack to function properly
            * Disables use of inline scripts in order to mitigate risk of XSS vulnerabilities. To change this:
                * Enable inline JS: add 'unsafe-inline' to default-src
        -->
    <meta http-equiv="Content-Security-Policy" content="default-src 'self' data: gap: https://ssl.gstatic.com 'unsafe-eval'; style-src 'self' 'unsafe-inline'; media-src *">

    <!-- Required meta tags-->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, minimal-ui">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="format-detection" content="telephone=no">
    <meta name="msapplication-tap-highlight" content="no">

    <!--Camera capture-->
    <script type="text/javascript" charset="utf-8" src="js/phonegap.js"></script>
    <script type="text/javascript" charset="utf-8">

    var pictureSource;   // picture source
    var destinationType; // sets the format of returned value 
    // Wait for PhoneGap to connect with the device
    //
    document.addEventListener("deviceready",onDeviceReady,false);
    // PhoneGap is ready to be used!
    //
    function onDeviceReady() {
        pictureSource=navigator.camera.PictureSourceType;
        destinationType=navigator.camera.DestinationType;
    }
    // Called when a photo is successfully retrieved
    //
    function onPhotoDataSuccess(imageData) {
      // Get image handle
      //
      var largeImage = document.getElementById('largeImage');
      // Unhide image elements
      //
      largeImage.style.display = 'block';
      // Show the captured photo
      // The inline CSS rules are used to resize the image
      //
      largeImage.src = "data:image/jpeg;base64," + imageData;
    }
    
    // Called when a photo is successfully retrieved
    //
    function onPhotoFileSuccess(imageData) {
      // Get image handle
      console.log(JSON.stringify(imageData));
      
      // Get image handle
      //
      var largeImage = document.getElementById('largeImage');
      // Unhide image elements
      //
      largeImage.style.display = 'block';
      // Show the captured photo
      // The inline CSS rules are used to resize the image
      //
      largeImage.src = imageData;
    }
    // Called when a photo is successfully retrieved
    //
    function onPhotoURISuccess(imageURI) {
      // Uncomment to view the image file URI 
      // console.log(imageURI);
      // Get image handle
      //
      var largeImage = document.getElementById('largeImage');
      // Unhide image elements
      //
      largeImage.style.display = 'block';
      // Show the captured photo
      // The inline CSS rules are used to resize the image
      //
      largeImage.src = imageURI;
    }
    // A button will call this function
    //
    function capturePhotoWithData() {
      // Take picture using device camera and retrieve image as base64-encoded string
      navigator.camera.getPicture(onPhotoDataSuccess, onFail, { quality: 50 });
    }
    function capturePhotoWithFile() {
        navigator.camera.getPicture(onPhotoFileSuccess, onFail, { quality: 50, destinationType: Camera.DestinationType.FILE_URI });
    }
    
    // A button will call this function
    //
    function getPhoto(source) {
      // Retrieve image file location from specified source
      navigator.camera.getPicture(onPhotoURISuccess, onFail, { quality: 50, 
        destinationType: destinationType.FILE_URI,
        sourceType: source });
    }
    // Called if something bad happens.
    // 
    function onFail(message) {
      alert('Failed because: ' + message);
    }
    </script>

    <!-- Your app title -->
    <title>My App</title>

    <!-- This template defaults to the iOS CSS theme. To support both iOS and material design themes, see the Framework7 Tutorial at the link below:
        http://www.idangero.us/framework7/tutorials/maintain-both-ios-and-material-themes-in-single-app.html
     -->

    <link rel="stylesheet" href="lib/framework7/css/framework7.ios.min.css">
    <link rel="stylesheet" href="lib/framework7/css/framework7.ios.colors.min.css">

    <link rel="stylesheet" href="css/styles.css">

    <!--Color Picker-->
    <style>
        *,*:after,*:before{
          -webkit-box-sizing:border-box;
          -moz-box-sizing:border-box;
          box-sizing:border-box;
        }

        body{
          margin:0;
          margin-top: 100px;
          padding:0;
          position:relative;
          background:#22142b;
        }

        .thumbnail{
          position:relative;
          display: block;
          width: 90%;
          overflow:hidden;
          margin: 0 auto;
          margin-top: 0px;
        }
        .thumbnail img {
          display: block;
          width: 100%;
          cursor: crosshair;
          border: 5px solid #fff;
          margin: 0 auto;
        }
        .result{
          position: fixed;
          top: 10%;
          left: 50%;
          background: #000;
          background: rgba(0, 0, 0, 0.3);
          color: #fff;
          margin: 0;
          padding: 10px 15px;
          display: block;
        }
        .result span {
          display: block;
          font-size: 13px;
        }
        .preview{
          position:absolute;
          top:5px;
          right:5px;
          display:block;
          margin:0;
          padding:0;
          width:50px;
          height:50px;
          border: 5px solid #FFF;
          border-right: none;
          border-top: none;
        }
        #cs{ 
          display:none;
        }

        </style>

</head>

<body>
    <!-- Status bar overlay for full screen mode (PhoneGap) -->
    <div class="statusbar-overlay"></div>

    <!-- Panels overlay-->
    <div class="panel-overlay"></div>
    <!-- Left panel with reveal effect-->
    <div class="panel panel-left panel-reveal">
        <div class="content-block">
            <p>Left panel content goes here</p>
            <a href="about.html">About app</a>
        </div>
    </div>

    <!-- Views -->
    <div class="views">
        <!-- Your main view, should have "view-main" class -->
        <div class="view view-main">
            <!-- Top Navbar-->
            <div class="navbar">
                <div class="navbar-inner">
                    <!-- We need cool sliding animation on title element, so we have additional "sliding" class -->
                    <div class="center sliding">Awesome App</div>
                    <div class="right">
                        <!--
                          Right link contains only icon - additional "icon-only" class
                          Additional "open-panel" class tells app to open panel when we click on this link
                        -->
                        <a href="#" class="link icon-only open-panel"><i class="icon icon-bars"></i></a>
                    </div>
                </div>
            </div>
            <!-- Pages container, because we use fixed-through navbar and toolbar, it has additional appropriate classes-->
            <div class="pages navbar-through toolbar-through">
                <!-- Page, "data-page" contains page name -->
                <div data-page="index" class="page">
                    <!-- Scrollable page content -->
                    <div class="page-content">
                        <div class="content-block">
                            <!--Camera capture-->
                            <!--<button onclick="capturePhotoWithData();">Capture Photo With Image Data</button> <br>-->
                            <button onclick="capturePhotoWithFile();">Capture Photo</button> <br>
                            <!--<button onclick="getPhoto(pictureSource.PHOTOLIBRARY);">From Photo Library</button><br>-->
                            <button onclick="getPhoto(pictureSource.SAVEDPHOTOALBUM);">From Photo Album</button><br>
                            <!--<img style="display:none;width:100%;height:100%;" id="smallImage" src="" />-->
                            <div class="thumbnail">
                                <div class="preview"></div>
                                <img style="display:none;width:100%;height:100%" id="largeImage" src="" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>


            <!--Color Picker-->
            <div class="result">
                <span>HEX: Please Select</span>
                <!--<span>RGB: rgb(34,20,43)</span>-->
            </div>

            <canvas id="cs"></canvas>

            <script>
            // vars
            var img = _('#largeImage'),
                canvas = _('#cs'),
                result = _('.result'),
                preview = _('.preview'),x = '',y = '';

            // click function
            img.addEventListener('click', function(e){
              // chrome
              if(e.offsetX) {
                x = e.offsetX;
                y = e.offsetY; 
              }
              // firefox
              else if(e.layerX) {
                x = e.layerX;
                y = e.layerY;
              }
              useCanvas(canvas,img,function(){
                // get image data
                var p = canvas.getContext('2d')
                .getImageData(x, y, 1, 1).data;
                // show info
                result.innerHTML = '<span>HEX: '+rgbToHex(p[0],p[1],p[2])+'</span>'
                 //+'<span>RGB:  rgb('+p[0]+','+p[1]+','+p[2]+')</span>';
                
                // add background in body
                preview.style.background =rgbToHex(p[0],p[1],p[2]);
              });
            },false);

            // preview function mousemove
            img.addEventListener('mousemove', function(e){
              // chrome
              if(e.offsetX) {
                x = e.offsetX;
                y = e.offsetY; 
              }
              // firefox
              else if(e.layerX) {
                x = e.layerX;
                y = e.layerY;
              }
              
              useCanvas(canvas,img,function(){
                
                // get image data
                var p = canvas.getContext('2d')
                .getImageData(x, y, 1, 1).data;
                // show preview color
                preview.style.background = rgbToHex(p[0],p[1],p[2]);
              });
            },false);


            // canvas function
            function useCanvas(el,image,callback){
              el.width = image.width; // img width
              el.height = image.height; // img height
              // draw image in canvas tag
              el.getContext('2d')
              .drawImage(image, 0, 0, image.width, image.height);
              return callback();
            }
            // short querySelector
            function _(el){
              return document.querySelector(el);
            };

            // convert rgba to hex 
            // http://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb
            function componentToHex(c) {
              var hex = c.toString(16);
              return hex.length == 1 ? "0" + hex : hex;
            }
            function rgbToHex(r, g, b) {
              return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b);
            }

            function findPos(obj) {
                var curleft = 0, curtop = 0;
                if (obj.offsetParent) {
                    do {
                        curleft += obj.offsetLeft;
                        curtop += obj.offsetTop;
                    } while (obj = obj.offsetParent);
                    return { x: curleft, y: curtop };
                }
                return undefined;
            }
            </script>
                <!-- Bottom Toolbar-->
                <<div class="toolbar">
                    <div class="toolbar-inner">
                        <!-- Toolbar links -->
                        <a href="#" class="link">Link 1</a>
                        <a href="#" class="link">Link 2</a>
                    </div>
                </div>
            </div>
        </div>

    <script type="text/javascript" src="cordova.js"></script>
    <script type="text/javascript" src="lib/framework7/js/framework7.min.js"></script>
    <script type="text/javascript" src="js/my-app.js"></script>
</body>

</html>